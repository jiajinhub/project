name: pipeline-workflow
on:
  push:
    branches:
      - "main"
      - "github_actions" #for debugging/dev purposes in this branch

jobs:
  build-and-test-maven:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4 # checkout repo

      - name: Set up JDK 17
        uses: actions/setup-java@v4 # setup maven
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Change Directory
        run: cd springbootWithPostgresql  # Change path to where pom.xml is located

      #build with automated run, run checks on code, update dependencies on the fly
      - name: Build with Maven
        working-directory: springbootWithPostgresql
        run: mvn --batch-mode --update-snapshots verify

      #Run tests
      - name: Run Java Tests
        working-directory: springbootWithPostgresql
        run: mvn test

      #create artifacts after job run
      - name: Create Test Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Test Reports
          path: springbootWithPostgresql/target/surefire-reports # Path to the directory containing test reports

  setup-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: browser-actions/setup-chrome@latest
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache node modules
        id: cache-nodemodules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # caching node_modules
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Dependencies
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: |
          npm ci --force
      - name: Build
        run: |
          npm run build --force
      - name: Lint
        run: |
          npm run lint
      - name: Update types to latest
        run: |
          npm install --save-dev @types/node@latest --force
      - name: Test
        run: |
          npm run test --watch=false --browsers=ChromeHeadlesss

  setup-and-push-docker-img:
    needs:
      - build-and-test-maven
      - setup-frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4 # checkout repo

      - name: Build Docker Image
        run: docker build . -t test-project-e -f ".devcontainer/Dockerfile"

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Tag Image
        run: docker tag test-project-e:latest ${{ secrets.DOCKER_USERNAME }}/swe5006_team28:fpta_latest

      - name: Push Docker Image to Registry
        run: docker push ${{ secrets.DOCKER_USERNAME }}/swe5006_team28:fpta_latest
