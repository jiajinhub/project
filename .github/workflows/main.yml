name: pipeline-workflow
on:
  push:
    branches:
      - "main"
      - "github_actions" #for debugging/dev purposes in this branch

jobs:
  remove-running-images: #in the case that the database connection conflicts with the running docker build
    runs-on: ubuntu-latest
    steps:
      - name: Remove existing images
        if: always()
        uses: appleboy/ssh-action@master
        with:
          host: "ec2-13-212-154-69.ap-southeast-1.compute.amazonaws.com" #requires changing when the aws instance is restarted
          username: "ubuntu"
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker system prune -f
            docker rmi $(docker images -qf "dangling=true")
            docker stop $(docker ps -aq)

  build-and-test-maven:
    needs:
      - remove-running-images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4 # checkout repo

      - name: Set up JDK 17
        uses: actions/setup-java@v4 # setup maven
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Change Directory
        run: cd springbootWithPostgresql  # Change path to where pom.xml is located

      #build with automated run, run checks on code, update dependencies on the fly
      - name: Build with Maven
        working-directory: springbootWithPostgresql
        run: mvn --batch-mode --update-snapshots verify

      #Run tests
      - name: Run Java Tests
        working-directory: springbootWithPostgresql
        run: mvn test

      #create artifacts after job run
      - name: Create Test Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Test Reports
          path: springbootWithPostgresql/target/surefire-reports # Path to the directory containing test reports


  setup-node:
    needs:
      - remove-running-images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: '20'
      - name: Install Dependencies
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: |
          npm ci --force
      - name: Update types to latest
        run: |
          npm install --save-dev @types/node@latest --force

  setup-and-push-docker-img-backend:
    needs:
      - build-and-test-maven
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4 # checkout repo

      - name: Build Docker Image
        run: |
          docker build . -t test-project-e-be -f "springbootWithPostgresql/.devcontainer/Dockerfile"
          docker ps

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Tag Image
        run: docker tag test-project-e-be:latest ${{ secrets.DOCKER_USERNAME }}/swe5006_team28:fpta_backend_latest

      - name: Push Docker Image to Registry
        run: docker push ${{ secrets.DOCKER_USERNAME }}/swe5006_team28:fpta_backend_latest


  setup-and-push-docker-img-frontend:
      needs:
        - setup-node
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Code
          uses: actions/checkout@v4 # checkout repo

        - name: Build Docker Image
          run: docker build . -t test-project-e-fe -f "Frontend/.devcontainer/Dockerfile"

        - name: Log in to Docker Hub
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}

        - name: Docker Tag Image
          run: docker tag test-project-e-fe:latest ${{ secrets.DOCKER_USERNAME }}/swe5006_team28:fpta_frontend_latest

        - name: Push Docker Image to Registry
          run: docker push ${{ secrets.DOCKER_USERNAME }}/swe5006_team28:fpta_frontend_latest


  deploy-app:
    needs:
      - setup-and-push-docker-img-backend # disable when the max connections hit
      - setup-and-push-docker-img-frontend
    runs-on: ubuntu-latest
    steps:
      - name: SSH into AWS EC2 instance and run Docker commands
        uses: appleboy/ssh-action@master
        with:
          host: "ec2-13-212-154-69.ap-southeast-1.compute.amazonaws.com" #requires changing when the aws instance is restarted
          username: "ubuntu"
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker system prune -f
            docker rmi $(docker images -qf "dangling=true")
            docker rm $(docker kill $(docker ps -aq))
            docker pull elishazacarias/swe5006_team28:fpta_backend_latest
            docker pull elishazacarias/swe5006_team28:fpta_frontend_latest
            backendImg=$(docker images -q elishazacarias/swe5006_team28:fpta_backend_latest)
            frontendImg=$(docker images -q elishazacarias/swe5006_team28:fpta_frontend_latest)
            echo $backendImg
            echo $frontendImg
            docker run -d -p 8080:8080 $backendImg
            docker run -d -p 9000:9000 $frontendImg
            
